graph={}

n= int(input("Enter number of vertices : "))

def inputg(n):
    for i in range(n):
        print("Enter name of ",i,"th vertex :")
        key = input()
        values=[]
        vn=int(input("Enter number of adjacent vertices : "))
        for i in range(vn):
            value=input("enter vertices : ")
            values.append(value)
        graph[key]=values

inputg(n)
starting = input("Enter starting Node: ")
print(graph)
visited = set()

def dfs(visited, graph, node):
    if node not in visited:
        print(node, end = " ")
        visited.add(node)
        
        for neighbor in graph[node]:
            dfs(visited, graph, neighbor)
dfs(visited, graph, starting)

visited = []		 
queue = []     		

def bfs_recursive(visited, graph, queue):
    if not queue:
        return

    node = queue.pop(0)
    print(node, end=" ")

    for neighbour in graph[node]:
        if neighbour not in visited:
            visited.append(neighbour)
            queue.append(neighbour)

    bfs_recursive(visited, graph, queue)

def bfs(visited, graph, node):
    visited.append(node)
    queue = [node]

    bfs_recursive(visited, graph, queue)
print("\nFollowing is the Breadth-First Search")
bfs(visited, graph, starting)





